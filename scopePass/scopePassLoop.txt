// with the tripcount as computed by SCEV.
//
//===----------------------------------------------------------------------===//
 
#include "llvm/Transforms/Scalar/LoopFlatten.h"
 #include "llvm/IR/LegacyPassManager.h"
#include "llvm/Passes/PassBuilder.h"
#include "llvm/Passes/PassPlugin.h"
#include "llvm/ADT/Statistic.h"
#include "llvm/Analysis/AssumptionCache.h"
#include "llvm/Analysis/LoopInfo.h"
#include "llvm/Analysis/LoopNestAnalysis.h"
#include "llvm/Analysis/MemorySSAUpdater.h"
#include "llvm/Analysis/OptimizationRemarkEmitter.h"
#include "llvm/Analysis/ScalarEvolution.h"
#include "llvm/Analysis/TargetTransformInfo.h"
#include "llvm/Analysis/ValueTracking.h"
#include "llvm/IR/Dominators.h"
#include "llvm/IR/Function.h"
#include "llvm/IR/IRBuilder.h"
#include "llvm/IR/Module.h"
#include "llvm/IR/PatternMatch.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/raw_ostream.h"
#include "llvm/Transforms/Scalar/LoopPassManager.h"
#include "llvm/Transforms/Utils/Local.h"
#include "llvm/Transforms/Utils/LoopUtils.h"
#include "llvm/Transforms/Utils/LoopVersioning.h"
#include "llvm/Transforms/Utils/ScalarEvolutionExpander.h"
#include "llvm/Transforms/Utils/SimplifyIndVar.h"
#include "llvm/Analysis/AliasAnalysis.h"
#include "llvm/Analysis/AliasSetTracker.h"

using namespace llvm;

namespace {
class scopePass : public PassInfoMixin<scopePass> {
public:
    // Run the pass on a single loop
    PreservedAnalyses run(Loop &L, LoopAnalysisManager &LAM,
                                       LoopStandardAnalysisResults &LAR,
                                       LPMUpdater &U) {
                                        

                                            // MAM.getResult<FunctionAnalysisManagerModuleProxy>(M).getManager();
    // llvm::Function *F = M.getFunction("foo");
     AliasAnalysis *AA = &LAR.AA;
    BatchAAResults BatchAA(*AA);
    AliasSetTracker AST(BatchAA);
        errs()<<"this is the loop \n";

// //  for (const auto &Loop : LN) {
//     errs()<<
//  }
// LoopInfo LI;
// Loop *CurLoop;
errs()<<L;
  for (auto *Block : L.getBlocks()) {
    // Ignore blocks in subloops.
      AST.add(*Block);
      errs()<<*Block;
  }
//    AST.dump();
//   for (auto *Block : CurLoop->getBlocks()) {
//     // Ignore blocks in subloops.
//     if (LI.getLoopFor(Block) == CurLoop)
//       AST.add(*Block);
//   }

//       for (auto *Block : CurLoop->getBlocks()) {
//     // Ignore blocks in subloops.
//     // if (LI.getLoopFor(Block) == CurLoop)
//     //   AST.add(*Block);
//   }

    errs() << "Alias Set Tracker:\n";
        for (const auto &I : AST) {
            const AliasSet &AS = I;
            if (AS.isForwardingAliasSet())
                continue; 

            errs() << "Alias Set:\n";
            for (const auto &A : AS) {
                errs() << "  " << *A.getValue() << "\n";
            }
        }



    return PreservedAnalyses::all();

}
  static bool isRequired() { return true; }
};
} // end anonymous namespace

// Register the pass with the new pass manager
llvm::PassPluginLibraryInfo getScopePassPluginInfo() {
    return {LLVM_PLUGIN_API_VERSION, "ScopePass", LLVM_VERSION_STRING,
            [](PassBuilder &PB) {
                PB.registerPipelineParsingCallback(
                    [](StringRef Name, LoopPassManager &LPM,
                       ArrayRef<PassBuilder::PipelineElement>) {
                        if (Name == "scopePass") {
                            LPM.addPass(scopePass());
                            return true;
                        }
                        return false;
                    });
            }};
}

// This macro registers the pass for dynamic loading.
extern "C" LLVM_ATTRIBUTE_WEAK PassPluginLibraryInfo llvmGetPassPluginInfo() {
    return getScopePassPluginInfo();
}
